// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"context"
	"fmt"
	"time"

	"github.com/dorm-parcel-manager/dpm/common/client"
	"github.com/dorm-parcel-manager/dpm/common/db"
	"github.com/dorm-parcel-manager/dpm/common/pb"
	"github.com/dorm-parcel-manager/dpm/common/server"
	"github.com/dorm-parcel-manager/dpm/services/parcel/config"
	"github.com/dorm-parcel-manager/dpm/services/parcel/service"
	sd "github.com/dorm-parcel-manager/dpm/common/service-discovery"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitializeServer() (*server.Server, func(), error) {

	configConfig := config.ProvideConfig()
	serverConfig := configConfig.Server
	//clientConfig := configConfig.Client

	sdClint := sd.GetServiceDiscoveryClient()
	
	userServiceClient, cleanup, err := client.ProvideUserServiceClient(sdClint)
	if err != nil {
		return nil, nil, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	resp, _ := userServiceClient.Hello(ctx, &pb.HelloRequest{Name : "parcel-server",})
	fmt.Println(resp)

	dbConfig := configConfig.DB
	gormDB, err := db.NewDb(dbConfig)
	if err != nil {
		return nil, nil, err
	}

	parcelServiceServer, err := service.NewParcelServiceServer(gormDB, userServiceClient, sdClint)
	if err != nil {
		cleanup()
		return nil, nil, err
	}

	grpcServer := ProvideGrpcServer(parcelServiceServer)
	serverServer := server.NewServer(serverConfig, grpcServer)

	return serverServer, func() {
		cleanup()
	}, nil
}

// wire.go:

func ProvideGrpcServer(parcelService pb.ParcelServiceServer) *grpc.Server {
	s := grpc.NewServer()
	pb.RegisterParcelServiceServer(s, parcelService)
	return s
}
